//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █  
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define BASE 0
#define NAV  1
#define SYM  2
#define ADJ  3
#define TVP1 4
#define TVP2 5

&mt {
};

/ {
    combos {
        compatible = "zmk,combos";

        esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
            layers = <0 1 2 3>;
        };

        ret {
            bindings = <&kp ENTER>;
            key-positions = <16 17 18>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12 13>;
        };

        super {
            bindings = <&kp LEFT_GUI>;
            key-positions = <32 37>;
            slow-release;
        };

        aa {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <17 18>;
            layers = <0>;
        };

        shift_combo_left {
            bindings = <&kp LEFT_SHIFT>;
            key-positions = <13 12>;
        };

        shift_combo_right {
            bindings = <&kp LEFT_SHIFT>;
            key-positions = <16 17>;
        };

        dual_shift {
            bindings = <&caps>;
            key-positions = <12 13 16 17>;
        };

        ae {
            bindings = <&kp APOS>;
            key-positions = <18 19>;
            layers = <0>;
        };

        BT {
            bindings = <&mo 4>;
            key-positions = <32 33 34>;
        };

        num_overlay {
            bindings = <&tog 5>;
            key-positions = <35 36 37>;
        };
    };

    behaviors {
        mt_nav: mt_nav {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_NAV";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <180>;
            flavor = "balanced";
            quick-tap-ms = <100>;
        };

        caps: caps {
            compatible = "zmk,behavior-tap-dance";
            label = "CAPS";
            #binding-cells = <0>;
            bindings = <&caps_word>, <&kp CAPSLOCK>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            label = "BASE";
            bindings = <
              &kp Q  &kp W  &kp E             &kp R  &kp T        &kp Y       &kp U  &kp I          &kp O    &kp P
              &kp A  &kp S  &kp D             &kp F  &kp G        &kp H       &kp J  &kp K          &kp L    &kp SEMI
&kp LEFT_ALT  &kp Z  &kp X  &kp C             &kp V  &kp B        &kp N       &kp M  &kp COMMA      &kp DOT  &kp FSLH  &kp RGUI
                            &kp LEFT_CONTROL  &mo 2  &kp SPACE    &kp DELETE  &mo 1  &kp BACKSPACE
            >;
        };

        symbols {
            label = "SYM";
            bindings = <
        &mt LS(GRAVE) GRAVE    &kp LS(NUMBER_1)  &mt RA(NUMBER_2) LS(N2)  &kp LS(NUMBER_3)  &kp RA(NUMBER_4)    &kp LS(N5)  &kp LS(NUMBER_6)  &kp LS(N7)           &kp LS(N0)  &kp LS(MINUS)
        &kp RIGHT_BRACKET      &kp LS(EQUAL)     &kp NUHS                 &kp RA(EQUAL)     &none               &kp RA(N7)  &kp LS(N8)        &kp EQUAL            &kp LS(N9)  &kp RA(N0)
&trans  &kp RA(RIGHT_BRACKET)  &kp SLASH         &kp LS(RBKT)             &kp MINUS         &none               &kp NUBS    &kp RA(N8)        &kp LS(NON_US_HASH)  &kp RA(N9)  &kp LS(NON_US_BACKSLASH)  &trans
                                                 &trans                   &mo 3             &trans              &trans      &trans            &trans
            >;
        };

        num_nav {
            label = "NUM";
            bindings = <
        &none  &mt_nav LS(LA(LC(LEFT))) LA(LC(LEFT))  &kp UP    &mt_nav LS(LA(LC(RIGHT))) LA(LC(RIGHT))  &kp C_VOL_UP        &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp N5
        &none  &kp LEFT                               &kp DOWN  &kp RIGHT                                &kp C_PLAY_PAUSE    &kp NUMBER_6  &kp N7        &kp N8        &kp N9        &kp N0
&trans  &none  &kp PG_UP                              &trans    &kp PG_DN                                &kp C_VOL_DN        &none         &none         &trans        &trans        &trans  &trans
                                                      &trans    &trans                                   &trans              &trans        &mo 3         &trans
            >;
        };

        FKEYS {
            label = "FKEYS";
            bindings = <
        &trans  &trans  &trans  &trans  &trans    &kp F1   &kp F2   &kp F3  &kp F4  &kp F5
        &trans  &trans  &trans  &trans  &trans    &kp F6   &kp F7   &kp F8  &kp F9  &kp F10
&trans  &trans  &trans  &trans  &trans  &trans    &kp F11  &kp F12  &trans  &trans  &trans   &trans
                        &trans  &trans  &trans    &trans   &trans   &trans
            >;
        };

        BT {
            label = "BT";
            bindings = <
            &bt BT_CLR    &trans        &soft_off     &trans        &trans          &trans        &trans        &soft_off     &trans        &trans
            &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&bt BT_CLR  &trans        &out OUT_USB  &out OUT_TOG  &out OUT_BLE  &trans          &trans        &out OUT_USB  &out OUT_TOG  &out OUT_BLE  &trans        &trans
                                        &trans        &trans        &trans          &trans        &trans        &trans
            >;
        };

        num_overlay {
            bindings = <
        &trans  &trans    &kp UP_ARROW  &trans     &trans    &kp N1  &kp N2  &kp N3  &kp N4  &kp N5
        &trans  &kp LEFT  &kp DOWN      &kp RIGHT  &trans    &kp N6  &kp N7  &kp N8  &kp N9  &kp N0
&trans  &trans  &trans    &trans        &trans     &trans    &trans  &trans  &trans  &trans  &trans  &trans
                          &trans        &trans     &trans    &trans  &trans  &trans
            >;
        };
    };
};
